// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BIARLL
double BIARLL(arma::vec yest, arma::vec phiValues, arma::vec y1, arma::vec y2, arma::vec t, arma::vec yerr1, arma::vec yerr2, String zeroMean);
RcppExport SEXP _iAR_BIARLL(SEXP yestSEXP, SEXP phiValuesSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP tSEXP, SEXP yerr1SEXP, SEXP yerr2SEXP, SEXP zeroMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type yest(yestSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type phiValues(phiValuesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yerr1(yerr1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yerr2(yerr2SEXP);
    Rcpp::traits::input_parameter< String >::type zeroMean(zeroMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(BIARLL(yest, phiValues, y1, y2, t, yerr1, yerr2, zeroMean));
    return rcpp_result_gen;
END_RCPP
}
// BIARfit
List BIARfit(arma::vec phiValues, arma::vec y1, arma::vec y2, arma::vec t, arma::vec yerr1, arma::vec yerr2, String zeroMean);
RcppExport SEXP _iAR_BIARfit(SEXP phiValuesSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP tSEXP, SEXP yerr1SEXP, SEXP yerr2SEXP, SEXP zeroMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phiValues(phiValuesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yerr1(yerr1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yerr2(yerr2SEXP);
    Rcpp::traits::input_parameter< String >::type zeroMean(zeroMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(BIARfit(phiValues, y1, y2, t, yerr1, yerr2, zeroMean));
    return rcpp_result_gen;
END_RCPP
}
// BIARphikalman
double BIARphikalman(arma::vec phiValues, arma::vec y1, arma::vec y2, arma::vec t, arma::vec yerr1, arma::vec yerr2, String zeroMean);
RcppExport SEXP _iAR_BIARphikalman(SEXP phiValuesSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP tSEXP, SEXP yerr1SEXP, SEXP yerr2SEXP, SEXP zeroMeanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phiValues(phiValuesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yerr1(yerr1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yerr2(yerr2SEXP);
    Rcpp::traits::input_parameter< String >::type zeroMean(zeroMeanSEXP);
    rcpp_result_gen = Rcpp::wrap(BIARphikalman(phiValues, y1, y2, t, yerr1, yerr2, zeroMean));
    return rcpp_result_gen;
END_RCPP
}
// CIARfit
List CIARfit(arma::vec phiValues, arma::vec y, arma::vec t, String standarized, double c);
RcppExport SEXP _iAR_CIARfit(SEXP phiValuesSEXP, SEXP ySEXP, SEXP tSEXP, SEXP standarizedSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type phiValues(phiValuesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< String >::type standarized(standarizedSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(CIARfit(phiValues, y, t, standarized, c));
    return rcpp_result_gen;
END_RCPP
}
// CIARforecast
List CIARforecast(double phiR, double phiI, arma::vec y1, arma::vec st, double nAhead);
RcppExport SEXP _iAR_CIARforecast(SEXP phiRSEXP, SEXP phiISEXP, SEXP y1SEXP, SEXP stSEXP, SEXP nAheadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phiR(phiRSEXP);
    Rcpp::traits::input_parameter< double >::type phiI(phiISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st(stSEXP);
    Rcpp::traits::input_parameter< double >::type nAhead(nAheadSEXP);
    rcpp_result_gen = Rcpp::wrap(CIARforecast(phiR, phiI, y1, st, nAhead));
    return rcpp_result_gen;
END_RCPP
}
// CIARphikalman
double CIARphikalman(arma::vec x, arma::vec y, arma::vec t, arma::vec yerr, String zeroMean, String standarized, double c);
RcppExport SEXP _iAR_CIARphikalman(SEXP xSEXP, SEXP ySEXP, SEXP tSEXP, SEXP yerrSEXP, SEXP zeroMeanSEXP, SEXP standarizedSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yerr(yerrSEXP);
    Rcpp::traits::input_parameter< String >::type zeroMean(zeroMeanSEXP);
    Rcpp::traits::input_parameter< String >::type standarized(standarizedSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(CIARphikalman(x, y, t, yerr, zeroMean, standarized, c));
    return rcpp_result_gen;
END_RCPP
}
// CIARsample
List CIARsample(int n, double phiR, double phiI, arma::vec st, int rho, int c);
RcppExport SEXP _iAR_CIARsample(SEXP nSEXP, SEXP phiRSEXP, SEXP phiISEXP, SEXP stSEXP, SEXP rhoSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type phiR(phiRSEXP);
    Rcpp::traits::input_parameter< double >::type phiI(phiISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st(stSEXP);
    Rcpp::traits::input_parameter< int >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(CIARsample(n, phiR, phiI, st, rho, c));
    return rcpp_result_gen;
END_RCPP
}
// IARgsample
List IARgsample(double phi, arma::vec st, int n, int sigma2, int mu);
RcppExport SEXP _iAR_IARgsample(SEXP phiSEXP, SEXP stSEXP, SEXP nSEXP, SEXP sigma2SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st(stSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(IARgsample(phi, st, n, sigma2, mu));
    return rcpp_result_gen;
END_RCPP
}
// IARphigamma
double IARphigamma(arma::vec x_input, arma::vec y, arma::vec st);
RcppExport SEXP _iAR_IARphigamma(SEXP x_inputSEXP, SEXP ySEXP, SEXP stSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x_input(x_inputSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st(stSEXP);
    rcpp_result_gen = Rcpp::wrap(IARphigamma(x_input, y, st));
    return rcpp_result_gen;
END_RCPP
}
// IARphikalman
double IARphikalman(double x, arma::vec y, arma::vec yerr, arma::vec st, String zeroMean, String standarized);
RcppExport SEXP _iAR_IARphikalman(SEXP xSEXP, SEXP ySEXP, SEXP yerrSEXP, SEXP stSEXP, SEXP zeroMeanSEXP, SEXP standarizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yerr(yerrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st(stSEXP);
    Rcpp::traits::input_parameter< String >::type zeroMean(zeroMeanSEXP);
    Rcpp::traits::input_parameter< String >::type standarized(standarizedSEXP);
    rcpp_result_gen = Rcpp::wrap(IARphikalman(x, y, yerr, st, zeroMean, standarized));
    return rcpp_result_gen;
END_RCPP
}
// IARphiloglik
double IARphiloglik(double x, arma::vec y, arma::vec st, arma::vec delta_input, String includeMean, String standarized);
RcppExport SEXP _iAR_IARphiloglik(SEXP xSEXP, SEXP ySEXP, SEXP stSEXP, SEXP delta_inputSEXP, SEXP includeMeanSEXP, SEXP standarizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st(stSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta_input(delta_inputSEXP);
    Rcpp::traits::input_parameter< String >::type includeMean(includeMeanSEXP);
    Rcpp::traits::input_parameter< String >::type standarized(standarizedSEXP);
    rcpp_result_gen = Rcpp::wrap(IARphiloglik(x, y, st, delta_input, includeMean, standarized));
    return rcpp_result_gen;
END_RCPP
}
// IARphit
double IARphit(arma::vec x, arma::vec y, arma::vec st, double nu);
RcppExport SEXP _iAR_IARphit(SEXP xSEXP, SEXP ySEXP, SEXP stSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st(stSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(IARphit(x, y, st, nu));
    return rcpp_result_gen;
END_RCPP
}
// IARsample
List IARsample(double phi, arma::vec st, int n);
RcppExport SEXP _iAR_IARsample(SEXP phiSEXP, SEXP stSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type st(stSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(IARsample(phi, st, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_iAR_BIARLL", (DL_FUNC) &_iAR_BIARLL, 8},
    {"_iAR_BIARfit", (DL_FUNC) &_iAR_BIARfit, 7},
    {"_iAR_BIARphikalman", (DL_FUNC) &_iAR_BIARphikalman, 7},
    {"_iAR_CIARfit", (DL_FUNC) &_iAR_CIARfit, 5},
    {"_iAR_CIARforecast", (DL_FUNC) &_iAR_CIARforecast, 5},
    {"_iAR_CIARphikalman", (DL_FUNC) &_iAR_CIARphikalman, 7},
    {"_iAR_CIARsample", (DL_FUNC) &_iAR_CIARsample, 6},
    {"_iAR_IARgsample", (DL_FUNC) &_iAR_IARgsample, 5},
    {"_iAR_IARphigamma", (DL_FUNC) &_iAR_IARphigamma, 3},
    {"_iAR_IARphikalman", (DL_FUNC) &_iAR_IARphikalman, 6},
    {"_iAR_IARphiloglik", (DL_FUNC) &_iAR_IARphiloglik, 6},
    {"_iAR_IARphit", (DL_FUNC) &_iAR_IARphit, 4},
    {"_iAR_IARsample", (DL_FUNC) &_iAR_IARsample, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_iAR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
